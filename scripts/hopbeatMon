#!/usr/bin/python3
###
### Author: rdt12@psu.edu
### Date: Sep 3, 2020
### Desc: In a loop, connect to the HOP server and write metrics to the influx server.
###       Metrics include:
###
###           time to run kafkacat
###           hearbeats since last loop
###           difference between hearbeat timestamp and now
###
from optparse import OptionParser
import Utils as ut
import HeartUtils as hu
import sys
import os
import time
from hop import Stream
import json
from multiprocessing import Process, Queue
## Line buffer stdout and stderr
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', buffering=1)
sys.stderr = os.fdopen(sys.stderr.fileno(), 'w', buffering=1)

##
## Parse options.
##
cHelp     = "SCiMMA client configuration file"
sHelp     = "SCiMMA server URL"
sUrl      = "dev.hop.scimma.org:9092"
iUrl      = "http://influx.dev.hop.scimma.org:8010"
topic     = "heartbeat"
influxDb  = "hop"
interval  = "30"

p = OptionParser(usage="Usage: %prog [options]")
p.add_option("",   "--scimma", dest="scimmaUrl", default=sUrl, help=sHelp)
p.add_option("-F", "--config", dest="scimmaConfFile", default="~/shared/kafkacat.conf", help=cHelp)
(o, a) = p.parse_args()

if (os.environ.get('INFLUX_URL') is not None):
    iUrl = os.environ.get('INFLUX_URL')

if (os.environ.get('INFLUX_DB') is not None):
    influxDb = os.environ.get('INFLUX_DB')

icingaUrl = None
if (os.environ.get('ICINGA_URL') is not None):
    icingaUrl = os.environ.get('ICINGA_URL')

icingaService = None
if (os.environ.get('ICINGA_SERVICE') is not None):
    icingaService = os.environ.get('ICINGA_SERVICE')

if (os.environ.get('HOP_TOPIC') is not None):
   topic = os.environ.get('HOP_TOPIC')

if (os.environ.get('MONITOR_INTERVAL') is not None):
    interval = os.environ.get('MONITOR_INTERVAL')

scimmaUrl      = o.scimmaUrl
scimmaConfFile = os.path.expanduser(o.scimmaConfFile)
influxUrl      = iUrl

print("hopBeatMon starting")
print("SCiMMA server URL:  %s" % scimmaUrl)
print("Hopbeat topic:      %s" % topic)
print("Interval:           %s" % interval)
print("Iinflux URL:        %s" % influxUrl)
print("Influx DB:          %s" % influxDb)
print("SCiMMA config file: %s\n" % scimmaConfFile)

statsQueue = Queue()
checkQueue = Queue()

statsP = Process(target=hu.statsWriter, args=(statsQueue, influxUrl, influxDb))
statsP.daemon = True
statsP.start()
checkP = Process(target=hu.checkWriter, args=(checkQueue, icingaUrl, icingaService))
checkP.daemon = True
checkP.start()

lastBeat = 0
stream = Stream(persist=True)
afterWriteStats = 0
afterWriteCheck = 0
writeStatsLatency = 0
writeCheckLatency = 0
modifiedLatency   = 0
with stream.open(scimmaUrl) as s:
  for i, (message, metadata) in enumerate(s.read(batch_size=1, metadata=True)):
    ok       = 1
    nowFloat = time.time()
    now      = int(nowFloat * 10**9)
    nowMs    = int(nowFloat * 10**6)
    beatTime = message["timestamp"]
    beat     = message["count"]
    print("Received beat: %d %d %d  " % (beat, nowMs, beatTime))
    if (lastBeat > 0):
      latency  = (nowMs - beatTime)/(10**6)
      modifiedLatency = latency - (writeStatsLatency + writeCheckLatency)
      beatDiff = beat - lastBeat
      sd = {'end': False, 'ok': ok, 'now': now, 'latency': latency, 'beatDiff': beatDiff, 'beat': beat }
      statsQueue.put(sd)
      cd = {'end': False, 'ok': ok, 'now': now, 'latency': latency, 'beatDiff': beatDiff}
      checkQueue.put(cd)
    lastBeat = beat

print("hopbeatMon main loop complete.")
sd = {'end': True, 'ok': 0, 'now': now, 'latency': 0, 'beatDiff': 0, 'beat': 0 }
statsQueue.put(sd)
cd = {'end': True, 'ok': 0, 'now': now, 'latency': 0, 'beatDiff': 0}
checkQueue.put(cd)
statsP.join()
checkP.join()
sys.exit(0)
